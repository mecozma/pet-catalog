{"version":3,"sources":["Pet/Pet.js","Pets/Pets.js","SelectPetType/SelectPetType.js","PetGender/PetGender.js","SearchAddress/SearchAddress.js","Spinner/Spinner.js","Button/Button.js","App.js","serviceWorker.js","index.js","App.module.css","Button/Button.module.css"],"names":["Pet","props","react_default","a","createElement","className","src","image","alt","concat","petType","petBreed","name","petGender","petLocation","Pets","_ref","pets","selectedPet","selectedGender","inputValue","showPets","filteredPets","Object","toConsumableArray","filter","pet","animal_type","Animal_Gender","Address","length","map","i","src_Pet_Pet","key","Animal_ID","Animal_Name","Animal_Breed","Image","SelectPetType","selectedPetHandler","onChange","e","target","value","el","petTypes","PropTypes","array","isRequired","func","PetGender","selectedGenderHandler","petGenders","gender","SearchAddress","suggestion","onchange","suggestions","text","onclick","address","onClick","type","placeholder","Spinner","Button","classes","btnType","join","clicked","children","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","selectGenderHandler","console","log","addressInputHandler","petAddress","state","suggestionsS","regex","RegExp","sort","test","suggestionSelected","giveMePetsHandler","clearSelectionHandler","isLoading","_this2","Tabletop","init","callback","googleData","animalType","includes","push","animalAddress","animalGenders","simpleSheet","_this$state","App__searchField","src_SelectPetType_SelectPetType","src_PetGender_PetGender","src_SearchAddress_SearchAddress","addresses","src_Button_Button","src_Spinner_Spinner","src_Pets_Pets","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","Success","Danger"],"mappings":"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","file":"static/js/main.a1a15ae4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Pet.css\";\r\n\r\nconst Pet = props => {\r\n  return (\r\n    <div className=\"Pet\">\r\n      <div className=\"Pet__image\">\r\n        <img\r\n          src={props.image}\r\n          alt={`Missing thumbnail of a ${props.petType}`}\r\n        />\r\n      </div>\r\n      <div className=\"Pet__description\">\r\n        <h3>\r\n          Pet type: <span>{props.petType}</span>.\r\n        </h3>\r\n        <h4>\r\n          Breed: <span>{props.petBreed}</span>.\r\n        </h4>\r\n        <h4>\r\n          Name: <span>{props.name}</span>.\r\n        </h4>\r\n        <h4>\r\n          Gender: <span>{props.petGender}</span>.\r\n        </h4>\r\n        <h4>\r\n          Pet location: <span>{props.petLocation}</span>.\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pet;\r\n","import React from \"react\";\r\nimport Pet from \"../Pet/Pet\";\r\nimport \"./Pets.css\";\r\n\r\nconst Pets = ({ pets, selectedPet, selectedGender, inputValue, showPets }) => {\r\n  let filteredPets = [...pets];\r\n\r\n  if (selectedPet && selectedPet !== \"All Pets\")\r\n    filteredPets = filteredPets.filter(pet => pet.animal_type === selectedPet);\r\n  if (selectedGender)\r\n    filteredPets = filteredPets.filter(\r\n      pet => pet.Animal_Gender === selectedGender\r\n    );\r\n  if (inputValue)\r\n    filteredPets = filteredPets.filter(pet => pet.Address === inputValue);\r\n  if (filteredPets.length === 0) return <div>No pets</div>;\r\n  return (\r\n    <div className=\"Pets\">\r\n      {showPets\r\n        ? filteredPets.map((pet, i) => {\r\n            return (\r\n              <Pet\r\n                key={pet.Animal_ID + i}\r\n                name={pet.Animal_Name}\r\n                petType={pet.animal_type}\r\n                petGender={pet.Animal_Gender}\r\n                petBreed={pet.Animal_Breed}\r\n                petLocation={pet.Address}\r\n                image={pet.Image}\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pets;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./SelectPetType.css\";\r\n\r\nconst SelectPetType = ({ petType, selectedPetHandler }) => {\r\n  return (\r\n    <div className=\"SelectPetType\">\r\n      <select onChange={e => selectedPetHandler(e.target.value)}>\r\n        {petType.map((el, i) => {\r\n          return (\r\n            <option key={el + i} value={el}>\r\n              {el}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nSelectPetType.petTypes = {\r\n  petType: PropTypes.array.isRequired,\r\n  selectedPetHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SelectPetType;\r\n","import React from \"react\";\r\nimport \"./PetGender.css\";\r\n\r\nconst PetGender = ({ selectedGender, selectedGenderHandler, petGenders }) => {\r\n  return (\r\n    <div className=\"PetGender\">\r\n      <select onChange={selectedGenderHandler}>\r\n        {petGenders.map((gender, i) => {\r\n          return (\r\n            <option key={i} value={gender}>\r\n              {gender}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetGender;\r\n","import React from \"react\";\r\nimport \"./SearchAddress.css\";\r\n\r\nconst SearchAddress = ({ onchange, suggestions, text, onclick }) => {\r\n  let suggestion;\r\n\r\n  if (suggestions.length === 0) {\r\n    suggestion = null;\r\n  } else {\r\n    suggestion = suggestions.map((address, i) => (\r\n      <li onClick={() => onclick(address)} key={i}>\r\n        {address}\r\n      </li>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div className=\"SearchAddress\">\r\n      <input\r\n        value={text}\r\n        onChange={e => onchange(e.target.value)}\r\n        type=\"text\"\r\n        placeholder=\"Search by address\"\r\n      />\r\n      <ul>{suggestion}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchAddress;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst Spinner = () => {\r\n  return <div className=\"Loader\">Loading...</div>;\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button\r\n      className={[classes.Button, classes[props.btnType]].join(\" \")}\r\n      onClick={props.clicked}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\nimport Pets from \"./Pets/Pets\";\nimport SelectPetType from \"./SelectPetType/SelectPetType\";\nimport PetGender from \"./PetGender/PetGender\";\nimport SearchAddress from \"./SearchAddress/SearchAddress\";\nimport Spinner from \"./Spinner/Spinner\";\nimport Button from \"./Button/Button\";\nimport classes from \"./App.module.css\";\n\nimport Tabletop from \"tabletop\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      pets: [],\n      petType: [],\n      petGenders: [],\n      selectedPet: \"\",\n      selectedGender: \"\",\n      petAddress: [],\n      suggestions: [],\n      inputValue: \"\",\n      showPets: false\n    };\n  }\n\n  /* ComponentDidMount() is invoked immediately after a component is mounted. \nInitialization that requires DOM nodes should go here. If you need to load\n data from a remote endpoint, this is a good place to instantiate the network\n  request. Setting state in this method will trigger a re-rendering. */\n  componentDidMount() {\n    Tabletop.init({\n      key: \"1IS_wjEiG_nUrnoOa49wOijx2Fgg5inYHYzpZePPnfn0\",\n      callback: googleData => {\n        let animalType = [\"All pet types\"];\n        googleData.map(el => {\n          return (\n            !animalType.includes(el.animal_type) &&\n            animalType.push(el.animal_type)\n          );\n        });\n        // creates an array all the adresses from the api\n        let animalAddress = [];\n        googleData.map(el => {\n          return (\n            !animalAddress.includes(el.Address) &&\n            animalAddress.push(el.Address)\n          );\n        });\n        // creates an array of all the pet's genders from the api\n        let animalGenders = [\"All genders\"];\n        googleData.map(\n          el =>\n            !animalGenders.includes(el.Animal_Gender) &&\n            animalGenders.push(el.Animal_Gender)\n        );\n        // sets state with the arays created above and the data from the api\n        this.setState({\n          pets: googleData,\n          isLoading: false,\n          petType: animalType,\n          petAddress: animalAddress,\n          petGenders: animalGenders\n        });\n      },\n      simpleSheet: true\n    });\n  }\n\n  // Sets state to the selected pet\n  selectedPetHandler = e => {\n    this.setState({\n      selectedPet: e\n    });\n  };\n  // Sets state to the selected pet's gender\n  selectGenderHandler = e => {\n    this.setState({\n      selectedGender: e.target.value\n    });\n    console.log(\"selected gender\", e.target.value);\n  };\n  // Sets state to the selected address and filters the suggested addresses\n  addressInputHandler = e => {\n    const { petAddress } = this.state;\n    let value = e;\n    let suggestionsS = [];\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, \"i\");\n      suggestionsS = petAddress.sort().filter(el => regex.test(el));\n    }\n\n    this.setState({\n      suggestions: suggestionsS,\n      inputValue: value\n    });\n  };\n\n  // Sets state with the selected address from the suggestions list\n  suggestionSelected = value => {\n    this.setState({\n      inputValue: value,\n      suggestions: []\n    });\n  };\n\n  giveMePetsHandler = () => {\n    this.setState({\n      showPets: true\n    });\n    console.log(\"Give me pets\");\n  };\n\n  clearSelectionHandler = () => {\n    this.setState({\n      showPets: false,\n      selectedPet: \"\",\n      selectedGender: \"\",\n      petAddress: [],\n\n      inputValue: \"\"\n    });\n    console.log(\"Clear selection\");\n  };\n\n  render() {\n    // destructured state\n    const {\n      isLoading,\n      pets,\n      petType,\n      selectedPet,\n      selectedGender,\n      petAddress,\n      suggestions,\n      inputValue,\n      petGenders,\n      showPets\n    } = this.state;\n\n    return (\n      <div className={classes.App}>\n        <h1>Pet Catalog</h1>\n        <div className={classes.App__searchField}>\n          <SelectPetType\n            selectedPetHandler={this.selectedPetHandler}\n            petType={petType}\n          />\n        </div>\n\n        <div className={classes.App__searchField}>\n          <PetGender\n            selectedGenderHandler={this.selectGenderHandler}\n            petGenders={petGenders}\n            selectedGender={selectedGender}\n          />\n        </div>\n\n        <div className={classes.App__searchField}>\n          <SearchAddress\n            onclick={this.suggestionSelected}\n            onchange={this.addressInputHandler}\n            addresses={petAddress}\n            text={inputValue}\n            suggestions={suggestions}\n          />\n        </div>\n        <Button clicked={this.clearSelectionHandler} btnType=\"Danger\">\n          Clear selection\n        </Button>\n        <Button clicked={this.giveMePetsHandler} btnType=\"Success\">\n          Give me pets\n        </Button>\n        {/* \n        If Is loading property is true the spinner will show otherwise a list of all the pets will be rendered\n        */}\n\n        {isLoading ? (\n          <Spinner />\n        ) : (\n          <Pets\n            pets={pets}\n            selectedPet={selectedPet}\n            selectedGender={selectedGender}\n            inputValue={inputValue}\n            showPets={showPets}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__31p5t\",\"App__searchField\":\"App_App__searchField__2kqlB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1f4Zf\",\"Success\":\"Button_Success__Vgzci\",\"Danger\":\"Button_Danger__1WsqS\"};"],"sourceRoot":""}